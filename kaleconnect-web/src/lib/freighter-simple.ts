// Vers√£o simplificada da detec√ß√£o do Freighter - sem loops ou logs excessivos

// Fun√ß√£o para for√ßar recarga da detec√ß√£o
export async function forceFreighterDetection(): Promise<boolean> {
  // Aguardar um pouco para extens√µes carregarem
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Tentar disparar evento de carregamento da extens√£o
  try {
    window.dispatchEvent(new Event('freighter-ready'));
    window.dispatchEvent(new Event('stellar-ready'));
  } catch {
    // Ignorar se falhar
  }
  
  // Verificar novamente
  return isFreighterAvailable();
}

export function isFreighterAvailable(): boolean {
  if (typeof window === "undefined") return false;
  
  const win = window as any;
  
  // Verifica√ß√µes m√∫ltiplas e agressivas
  const checks = [
    // APIs diretas
    () => !!win?.freighterApi,
    () => !!win?.freighter,
    () => !!win?.window?.freighterApi,
    () => !!win?.stellar?.freighter,
    
    // Verifica√ß√µes DOM
    () => !!document.querySelector('script[src*="freighter"]'),
    () => !!document.querySelector('meta[name*="freighter"]'),
    () => !!document.querySelector('[data-freighter]'),
    () => !!document.querySelector('#freighter-provider'),
    
    // Verifica√ß√µes de extens√£o Chrome espec√≠ficas
    () => !!document.querySelector('script[src*="chrome-extension"][src*="freighter"]'),
    () => !!document.getElementById('freighter-content-script'),
    
    // Verificar se h√° propriedades espec√≠ficas do Freighter
    () => {
      try {
        return typeof win?.freighterApi?.getPublicKey === 'function';
      } catch { return false; }
    },
    
    // Verificar eventos do Freighter
    () => {
      try {
        return win?.freighterApi && Object.keys(win.freighterApi).length > 0;
      } catch { return false; }
    }
  ];
  
  // Se qualquer verifica√ß√£o retornar true, considerar instalado
  const isInstalled = checks.some(check => {
    try {
      return check();
    } catch {
      return false;
    }
  });
  
  console.log('üîç Freighter detection result:', isInstalled);
  return isInstalled;
}

export async function connectFreighterSimple(): Promise<string | null> {
  console.log('üîó Tentando conectar ao Freighter...');
  
  // Estrat√©gia otimizada: menos tentativas, mais focada no m√≥dulo NPM que j√° est√° funcionando
  const maxAttempts = 6; // Reduzido de 12 para 6
  const interval = 500;
  
  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    console.log(`üîÑ Tentativa ${attempt + 1}/${maxAttempts}`);
    
    try {
      // Estrat√©gia 1: Verificar se Freighter est√° instalado via m√≥dulo NPM
      console.log('üì¶ Testando m√≥dulo NPM...');
      try {
        const mod: any = await import("@stellar/freighter-api");
        console.log('üì¶ M√≥dulo importado:', {
          exists: !!mod,
          getPublicKey: typeof mod?.getPublicKey,
          requestAccess: typeof mod?.requestAccess,
          isInstalled: typeof mod?.isInstalled,
          isConnected: typeof mod?.isConnected,
          allMethods: Object.keys(mod || {})
        });
        
        // Primeiro verificar se est√° instalado
        if (mod?.isInstalled && typeof mod.isInstalled === "function") {
          try {
            const installed = await mod.isInstalled();
            console.log('üîç Freighter instalado:', installed);
            if (!installed) {
              console.warn('‚ö†Ô∏è Freighter n√£o est√° instalado segundo m√≥dulo NPM');
              throw new Error('N√£o instalado');
            }
          } catch (e) {
            console.warn('‚ö†Ô∏è Erro ao verificar instala√ß√£o:', e);
          }
        }
        
        // Tentar requestAccess primeiro para ativar a API
        if (mod?.requestAccess && typeof mod.requestAccess === "function") {
          try {
            console.log('üîê Executando requestAccess...');
            await mod.requestAccess();
            console.log('‚úÖ requestAccess executado com sucesso');
          } catch (e) {
            console.warn('‚ö†Ô∏è requestAccess falhou:', e);
          }
        }
        
        // Verificar se getPublicKey est√° dispon√≠vel no m√≥dulo
        if (mod?.getPublicKey && typeof mod.getPublicKey === "function") {
          try {
            console.log('üóùÔ∏è Tentando getPublicKey (m√≥dulo NPM)...');
            
            // Tentar com diferentes par√¢metros
            let pk;
            try {
              pk = await mod.getPublicKey({ network: "TESTNET" });
            } catch {
              try {
                pk = await mod.getPublicKey();
              } catch {
                // Aguardar um pouco e tentar novamente
                await new Promise(resolve => setTimeout(resolve, 1000));
                pk = await mod.getPublicKey();
              }
            }
            
            if (typeof pk === "string" && pk.length > 0) {
              console.log('‚úÖ Conectado via m√≥dulo NPM');
              return pk;
            }
          } catch (e) {
            console.warn('‚ö†Ô∏è getPublicKey (m√≥dulo NPM) falhou:', e);
          }
        } else {
          console.log('‚ö†Ô∏è getPublicKey n√£o dispon√≠vel no m√≥dulo, tentando importa√ß√£o alternativa...');
          
          // Estrat√©gia alternativa: importar getPublicKey espec√≠fico
          try {
            const { getPublicKey } = await import("@stellar/freighter-api");
            if (typeof getPublicKey === "function") {
              console.log('üóùÔ∏è Tentando getPublicKey (importa√ß√£o direta)...');
              
              let pk;
              try {
                pk = await getPublicKey({ network: "TESTNET" });
              } catch {
                pk = await getPublicKey();
              }
              
              if (typeof pk === "string" && pk.length > 0) {
                console.log('‚úÖ Conectado via importa√ß√£o direta');
                return pk;
              }
            }
          } catch (e) {
            console.log('‚ÑπÔ∏è Importa√ß√£o direta falhou:', e);
          }
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Falha no m√≥dulo NPM:', e);
      }
      
      // Estrat√©gia 2: API injetada (aguardar inje√ß√£o da extens√£o)
      console.log('üåê Testando API injetada...');
      const win = window as any;
      
      // Aguardar um pouco mais para extens√£o injetar API nas primeiras tentativas
      if (attempt < 5) {
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      
      const api = win?.freighterApi || win?.freighter || win?.stellar?.freighter;
      
      console.log('üåê APIs encontradas:', {
        freighterApi: !!win?.freighterApi,
        freighter: !!win?.freighter,
        stellarFreighter: !!win?.stellar?.freighter,
        selectedApi: !!api,
        windowKeys: Object.keys(win).filter(k => k.toLowerCase().includes('freighter')),
        allExtensions: Object.keys(win).filter(k => k.toLowerCase().includes('stellar') || k.toLowerCase().includes('freighter'))
      });
      
      if (api && typeof api === 'object') {
        console.log('üåê Propriedades da API:', Object.keys(api));
        console.log('üåê Tipos das fun√ß√µes:', {
          getPublicKey: typeof api.getPublicKey,
          requestAccess: typeof api.requestAccess,
          isConnected: typeof api.isConnected,
          signTransaction: typeof api.signTransaction
        });
        
        // Tentar requestAccess se dispon√≠vel
        if (api.requestAccess && typeof api.requestAccess === "function") {
          try {
            console.log('üîê Executando requestAccess (API injetada)...');
            await api.requestAccess();
            console.log('‚úÖ requestAccess (API injetada) executado');
            
            // Aguardar um pouco para a API se estabilizar ap√≥s requestAccess
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Verificar se API foi atualizada ap√≥s requestAccess
            const updatedApi = (window as any)?.freighterApi || (window as any)?.freighter || api;
            if (updatedApi && updatedApi !== api) {
              console.log('üîÑ API atualizada ap√≥s requestAccess');
              Object.assign(api, updatedApi);
            }
          } catch (e) {
            console.warn('‚ö†Ô∏è requestAccess (API injetada) falhou:', e);
          }
        }
        
        // Tentar obter chave p√∫blica com m√∫ltiplas estrat√©gias
        try {
          console.log('üóùÔ∏è Tentando getPublicKey (API injetada)...');
          let pk;
          
          // Estrat√©gia 1: Fun√ß√£o getPublicKey direta
          if (api.getPublicKey && typeof api.getPublicKey === "function") {
            try {
              pk = await api.getPublicKey({ network: "TESTNET" });
            } catch {
              pk = await api.getPublicKey();
            }
          }
          
          if (typeof pk === "string" && pk.length > 0) {
            console.log('‚úÖ Conectado via API injetada');
            return pk;
          } else {
            console.log('‚ÑπÔ∏è API injetada presente mas getPublicKey n√£o dispon√≠vel ou retornou valor inv√°lido');
          }
        } catch (e) {
          console.log('‚ÑπÔ∏è Tentativa de getPublicKey (API injetada) n√£o funcionou:', e);
        }
      } else {
        console.log('‚ÑπÔ∏è API injetada n√£o encontrada nesta tentativa - continuando...');
        
        // Tentar disparar eventos para ativar a extens√£o
        try {
          window.dispatchEvent(new Event('freighter-ready'));
          window.dispatchEvent(new Event('stellar-ready'));
          window.dispatchEvent(new CustomEvent('freighter-connect'));
        } catch (e) {
          console.log('‚ÑπÔ∏è Erro ao disparar eventos:', e);
        }
      }
      
      // Estrat√©gia 3: Aguardar carregamento da extens√£o via eventos DOM
      if (attempt < 3) {
        console.log('üîÑ Aguardando carregamento da extens√£o...');
        await new Promise(resolve => {
          const timer = setTimeout(resolve, 1000);
          
          const checkExtension = () => {
            const newApi = (window as any)?.freighterApi;
            if (newApi && typeof newApi.getPublicKey === 'function') {
              clearTimeout(timer);
              resolve(undefined);
            }
          };
          
          // Verificar a cada 100ms
          const checker = setInterval(checkExtension, 100);
          setTimeout(() => clearInterval(checker), 1000);
        });
      }
      
    } catch (e) {
      console.warn(`‚ö†Ô∏è Tentativa ${attempt + 1} falhou:`, e);
    }
    
    // Aguardar antes da pr√≥xima tentativa
    if (attempt < maxAttempts - 1) {
      console.log(`‚è±Ô∏è Aguardando ${interval}ms antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, interval));
    }
  }
  
  console.error('‚ùå N√£o foi poss√≠vel conectar ao Freighter ap√≥s v√°rias tentativas');
  return null;
}

export async function checkFreighterConnectionSimple(): Promise<boolean> {
  if (!isFreighterAvailable()) {
    return false;
  }
  
  try {
    const mod: any = await import("@stellar/freighter-api");
    if (mod?.isConnected) {
      const connected = await mod.isConnected();
      return Boolean(connected);
    }
  } catch {
    // Tentar API injetada
  }
  
  const win = window as any;
  const api = win?.freighterApi || win?.freighter;
  
  if (api?.isConnected && typeof api.isConnected === "function") {
    try {
      const connected = await api.isConnected();
      return Boolean(connected);
    } catch {
      // Falhou
    }
  }
  
  return false;
}
