# üåø KaleConnect - Makefile
# Facilita comandos comuns de desenvolvimento

.PHONY: help init dev build test lint clean reset contracts status

# Configura√ß√µes
SHELL := /bin/bash
PROJECT_NAME := KaleConnect

# Comando padr√£o
help: ## Mostrar ajuda
	@echo "üåø $(PROJECT_NAME) - Comandos Dispon√≠veis"
	@echo
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo
	@echo "Exemplos:"
	@echo "  make init      # Inicializar projeto"
	@echo "  make dev       # Iniciar desenvolvimento"
	@echo "  make test      # Executar testes"

init: ## Inicializar projeto completo
	@echo "üöÄ Inicializando projeto $(PROJECT_NAME)..."
	@./init.sh

dev: ## Iniciar servidor de desenvolvimento
	@echo "üî• Iniciando servidor de desenvolvimento..."
	@./dev.sh start

build: ## Build de produ√ß√£o
	@echo "üèóÔ∏è  Executando build de produ√ß√£o..."
	@./dev.sh build

test: ## Executar todos os testes
	@echo "üß™ Executando testes..."
	@./dev.sh test

lint: ## Verificar c√≥digo com linter
	@echo "üîç Executando linter..."
	@./dev.sh lint

contracts: ## Compilar smart contracts
	@echo "üìú Compilando smart contracts..."
	@./dev.sh contracts

contracts-test: ## Testar smart contracts
	@echo "üß™ Testando smart contracts..."
	@./dev.sh contracts-test

clean: ## Limpar arquivos de build
	@echo "üßπ Limpando arquivos de build..."
	@./dev.sh clean

reset: ## Reset completo do projeto
	@echo "üîÑ Executando reset completo..."
	@./dev.sh reset

status: ## Verificar status dos servi√ßos
	@echo "üìä Verificando status..."
	@./dev.sh status

logs: ## Mostrar logs do servidor
	@echo "üìã Mostrando logs..."
	@./dev.sh logs

# Comandos compostos
setup: init ## Alias para init
	@echo "‚úÖ Setup conclu√≠do!"

start: dev ## Alias para dev
	@echo "üöÄ Servidor iniciado!"

check: lint test ## Executar lint e testes
	@echo "‚úÖ Verifica√ß√µes conclu√≠das!"

# Comandos espec√≠ficos da aplica√ß√£o web
web-dev: ## Iniciar apenas a aplica√ß√£o web
	@echo "üåê Iniciando aplica√ß√£o web..."
	@cd kaleconnect-web && npm run dev

web-build: ## Build apenas da aplica√ß√£o web
	@echo "üèóÔ∏è  Build da aplica√ß√£o web..."
	@cd kaleconnect-web && npm run build

web-install: ## Instalar depend√™ncias da aplica√ß√£o web
	@echo "üì¶ Instalando depend√™ncias da aplica√ß√£o web..."
	@cd kaleconnect-web && npm install

# Comandos espec√≠ficos dos smart contracts (requer Rust)
rust-setup: ## Configurar ambiente Rust
	@echo "ü¶Ä Configurando ambiente Rust..."
	@rustup update
	@rustup target add wasm32-unknown-unknown

rust-build: ## Compilar smart contracts para WASM
	@echo "ü¶Ä Compilando para WASM..."
	@cd contracts && cargo build --release --target wasm32-unknown-unknown --workspace

rust-test: ## Testar smart contracts
	@echo "ü¶Ä Testando smart contracts..."
	@cd contracts && cargo test --workspace

rust-clean: ## Limpar build Rust
	@echo "ü¶Ä Limpando build Rust..."
	@cd contracts && cargo clean

# Utilit√°rios
install: ## Instalar todas as depend√™ncias
	@echo "üì¶ Instalando depend√™ncias..."
	@npm install
	@cd kaleconnect-web && npm install

update: ## Atualizar depend√™ncias
	@echo "üîÑ Atualizando depend√™ncias..."
	@npm update
	@cd kaleconnect-web && npm update

security: ## Verificar vulnerabilidades de seguran√ßa
	@echo "üîí Verificando seguran√ßa..."
	@npm audit
	@cd kaleconnect-web && npm audit

# Comandos de informa√ß√£o
info: ## Mostrar informa√ß√µes do projeto
	@echo "üìã Informa√ß√µes do Projeto $(PROJECT_NAME)"
	@echo
	@echo "Estrutura:"
	@echo "  üìÅ kaleconnect-web/  - Aplica√ß√£o Next.js"
	@echo "  üìÅ contracts/       - Smart contracts Soroban"
	@echo "  üìÑ init.sh          - Script de inicializa√ß√£o"
	@echo "  üìÑ dev.sh           - Script de desenvolvimento"
	@echo
	@echo "Tecnologias:"
	@echo "  üåê Next.js 15.5.0"
	@echo "  ‚öõÔ∏è  React 19"
	@echo "  üé® Tailwind CSS 4"
	@echo "  ü¶Ä Rust + Soroban"
	@echo "  ‚≠ê Stellar SDK"
	@echo "  ü§ñ ElizaOS"

version: ## Mostrar vers√µes das ferramentas
	@echo "üìã Vers√µes das Ferramentas"
	@echo
	@echo -n "Node.js: "
	@node --version 2>/dev/null || echo "n√£o instalado"
	@echo -n "npm: "
	@npm --version 2>/dev/null || echo "n√£o instalado"
	@echo -n "Rust: "
	@rustc --version 2>/dev/null || echo "n√£o instalado"
	@echo -n "Cargo: "
	@cargo --version 2>/dev/null || echo "n√£o instalado"
